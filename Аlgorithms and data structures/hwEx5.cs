//Да се напише на езика C# приложение, в което:
//а) Да се дефинира функция, която:
//— чрез параметър получава достъп до масив от цели числа и две
//целочислени граници, които условно означаваме L и R ;
//— в случай, че R<L+8 , записва в елементите на получения масив цели
//числа, избирани по случаен начин от интервала [ 0;18];
//— в случай, че R>L+7 , записва в елементите на получения масив цели
//числа, делящи се на седем, избирани по случаен начин от интервала
//[L;R] .
//б) Да се дефинира функция, която:
//— чрез параметър получава достъп до масив от цели числа;
//— когато масивът е с по-малко от два елемента, връща като стойност на
//функцията нула;
//— когато масивът има поне два елемента, връща като стойност на
//функцията минималната разлика на два съседни елемента на масива.
//Например за масив { -3, 0, 11, 14, -1, 10, 9 } тази функция
//трябва да върне -15.
//в) Да се дефинира функция, която:
//— чрез параметър получава достъп до масив от цели числа;
//— извежда всеки елемент на масива, който се намира непосредствено
//след нечетен отрицателен и непосредствено преди четен положителен
//елементи;
//— за всеки изведен елемент съобщава и неговия индекс.
//г) Във функцията Main:
//— да се декларира именувана константа със стойност 9 и да се създаде
//масив от толкова цели числа, колкото е стойността на тази константа;
//— в така декларирания масив чрез функцията от подточка а) да се
//записват цели числа, делящи се на седем, избирани по случаен начин от
//интервала [−65;+55];
//— да се извиква функцията от подточка б), като ѝ се подава така
//създаденият масив, и да се извежда резултатът, върнат от функцията;
//— да се извиква функцията от подточка в), като чрез параметър ѝ се
//съобщава така създаденият масив.


using System;

namespace hw_ex5
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] arr1 = { 2, 3, 1, 5, 6, 7, 9, 2, 5, 3, 9 };
            int L = 0;
            int R = 10;
            //arrayBounds(arr1, L, R);

            int[] exampleArr = { -3, 0, 11, 14, -1, 10, 9 };
            isLengthMoreThan2(exampleArr);

            int[] input = { -3, -5, 20, 40 };
            isOddOrEven(input);

            int length = 4;
            int[] arr = new int[length];
            Console.WriteLine(arrayBounds(arr, -65, 55));
        }

        static int[] arrayBounds(int[] arr, int L, int R)
        {
            if (R < L + 8)
            {
                for (int i = 0; i < arr.Length; i++)
                {
                    Random newNumber = new Random();
                    arr[i] = newNumber.Next(1, 18);
                }
            }
            else if (R > L + 7)
            {
                for (int i = 2; i < arr.Length; i++)
                {
                    Random newNumber = new Random();
                    int rndNum = newNumber.Next(L, R - 1);
                    while (rndNum % 7 != 0)
                    {
                        newNumber = new Random();
                        rndNum = newNumber.Next(L, R - 1);
                    }
                    arr[i] = rndNum;
                }
            }
            Console.WriteLine("here");
            return arr;
        }

        static int isLengthMoreThan2(int[] arr){
            if(arr.Length < 2)
            {
                return 0;
            }
            else
            {
                int minDiff = 2147483640;
                for(int i = arr.Length - 2; i > 0; i--)
                {
                    int currentDiff = arr[i + 1] - arr[i];
                    if(currentDiff < minDiff)
                    {
                        minDiff = currentDiff;
                    }
                }
                return minDiff;
            }
        }

        static void isOddOrEven(int[] arr)
        {
            for(int i = 1; i < arr.Length - 1; i++)
            {
                if (( Math.Abs(arr[i - 1] % 2) == 1 && arr[i - 1] < 0) &&
                        (Math.Abs(arr[i + 1] % 2) == 0 && arr[i + 1] > 0))
                {
                    Console.WriteLine($"Текущ елемент: {arr[i]} с индекс {i}");
                }
            }

        }
    }
}
